// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/services/messages/proto/messages.proto

package messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Messages service

func NewMessagesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Messages service

type MessagesService interface {
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
}

type messagesService struct {
	c    client.Client
	name string
}

func NewMessagesService(name string, c client.Client) MessagesService {
	return &messagesService{
		c:    c,
		name: name,
	}
}

func (c *messagesService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*SendResponse, error) {
	req := c.c.NewRequest(c.name, "Messages.Send", in)
	out := new(SendResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Messages.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagesService) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.name, "Messages.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Messages service

type MessagesHandler interface {
	Send(context.Context, *SendRequest, *SendResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
}

func RegisterMessagesHandler(s server.Server, hdlr MessagesHandler, opts ...server.HandlerOption) error {
	type messages interface {
		Send(ctx context.Context, in *SendRequest, out *SendResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error
	}
	type Messages struct {
		messages
	}
	h := &messagesHandler{hdlr}
	return s.Handle(s.NewHandler(&Messages{h}, opts...))
}

type messagesHandler struct {
	MessagesHandler
}

func (h *messagesHandler) Send(ctx context.Context, in *SendRequest, out *SendResponse) error {
	return h.MessagesHandler.Send(ctx, in, out)
}

func (h *messagesHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.MessagesHandler.List(ctx, in, out)
}

func (h *messagesHandler) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.MessagesHandler.Read(ctx, in, out)
}
